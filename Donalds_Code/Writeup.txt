Numerical_quadrature_class-project

C++ code that can numerically evaluate an integral, parallelized using MPI, plus a few graphs ect of performance.

Read Writeup.txt and look at the graphs if you want to see fairly obvious conclusions about the code runs faster on more processors.

Change the function f and the array ab in the .cpp code if you want to numerically integrate something else. The quadrature method used is based on 5 points aranged in an X. 
If the square being intefrated is (-1,-1) to (1,1) then the center of the X is at (0,0) and the other points are at (+-a, +-a) where a=squrt(3/5) with 4/9 weight on the center and 5/35 weight on the edges. 
I don't know if it is a standard scheme because I made it up. 
It Is accurate up to order O(x^6) or O(x^2y^2). In other words, when evaluated on x^ay^b, this scheme is exact as long as max(a,b)<6 and min(a,b)<2.

As you can see from [graph1.png], the relationship between the number of cores used and the time taken per quad is almost perfectly inverse.
This is what you would expect, with the computations being split up with minimal but non-zero overhead.
This is the best case you can ask for with parrellization, a runtime that depends almost exclusively on the amount of compute needed, with almost no slowdown from parallization.

 
 [graph2.png] shows that the accuracy is approximately accuracy=res^-6.25*3.8e22
This makes the accuracy about cubic in the compute used (2x compute -> 1/8 th error) This is about what we would expect based on theoretical reasoning, because the quadrature algorithm used is O(x^6)
As the floating point can store 16 digits of accuracy, and the answer is arround 195, that means floating point errors around 1e-14. 
This algorithm will increase in accuracy up to about 700,000 resolution. However [graph3.png ]
shows the actual accuracy achieved is somewhat lower, at around 200,000 steps.



